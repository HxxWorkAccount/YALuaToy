//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from YALuaToy/Assets/LuaParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace YALuaToy.Compilation.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LuaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SEMI=1, ASSIGN=2, COMMA=3, LT=4, GT=5, DOT=6, SQUIG=7, MINUS=8, POUND=9, 
		OP=10, CP=11, AMP=12, PER=13, COL=14, PLUS=15, STAR=16, OCU=17, CCU=18, 
		OB=19, CB=20, PIPE=21, CARET=22, SLASH=23, AND=24, BREAK=25, DO=26, ELSE=27, 
		ELSEIF=28, END=29, FALSE=30, FOR=31, FUNCTION=32, GOTO=33, IF=34, IN=35, 
		LOCAL=36, NIL=37, NOT=38, OR=39, REPEAT=40, RETURN=41, THEN=42, TRUE=43, 
		UNTIL=44, WHILE=45, IDIV=46, CONCAT=47, DOTS=48, EQ=49, GE=50, LE=51, 
		NE=52, SHL=53, SHR=54, DBCOLON=55, NAME=56, NORMALSTRING=57, CHARSTRING=58, 
		LONGSTRING=59, INT=60, HEX=61, FLOAT=62, HEX_FLOAT=63, COMMENT=64, WS=65, 
		NL=66, SHEBANG=67;
	public const int
		RULE_start = 0, RULE_chunk = 1, RULE_block = 2, RULE_stat = 3, RULE_attnamelist = 4, 
		RULE_attrib = 5, RULE_retstat = 6, RULE_label = 7, RULE_funcname = 8, 
		RULE_varlist = 9, RULE_namelist = 10, RULE_explist = 11, RULE_exp = 12, 
		RULE_var = 13, RULE_var_name = 14, RULE_prefixexp = 15, RULE_prefixexp_without_functioncall = 16, 
		RULE_prefixexp_ = 17, RULE_functioncall_ = 18, RULE_functioncall = 19, 
		RULE_args = 20, RULE_functiondef = 21, RULE_funcbody = 22, RULE_parlist = 23, 
		RULE_tableconstructor = 24, RULE_fieldlist = 25, RULE_field = 26, RULE_fieldsep = 27, 
		RULE_number = 28, RULE_string = 29;
	public static readonly string[] ruleNames = {
		"start", "chunk", "block", "stat", "attnamelist", "attrib", "retstat", 
		"label", "funcname", "varlist", "namelist", "explist", "exp", "var", "var_name", 
		"prefixexp", "prefixexp_without_functioncall", "prefixexp_", "functioncall_", 
		"functioncall", "args", "functiondef", "funcbody", "parlist", "tableconstructor", 
		"fieldlist", "field", "fieldsep", "number", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "','", "'<'", "'>'", "'.'", "'~'", "'-'", "'#'", "'('", 
		"')'", "'&'", "'%'", "':'", "'+'", "'*'", "'{'", "'}'", "'['", "']'", 
		"'|'", "'^'", "'/'", "'and'", "'break'", "'do'", "'else'", "'elseif'", 
		"'end'", "'false'", "'for'", "'function'", "'goto'", "'if'", "'in'", "'local'", 
		"'nil'", "'not'", "'or'", "'repeat'", "'return'", "'then'", "'true'", 
		"'until'", "'while'", "'//'", "'..'", "'...'", "'=='", "'>='", "'<='", 
		"'~='", "'<<'", "'>>'", "'::'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SEMI", "ASSIGN", "COMMA", "LT", "GT", "DOT", "SQUIG", "MINUS", 
		"POUND", "OP", "CP", "AMP", "PER", "COL", "PLUS", "STAR", "OCU", "CCU", 
		"OB", "CB", "PIPE", "CARET", "SLASH", "AND", "BREAK", "DO", "ELSE", "ELSEIF", 
		"END", "FALSE", "FOR", "FUNCTION", "GOTO", "IF", "IN", "LOCAL", "NIL", 
		"NOT", "OR", "REPEAT", "RETURN", "THEN", "TRUE", "UNTIL", "WHILE", "IDIV", 
		"CONCAT", "DOTS", "EQ", "GE", "LE", "NE", "SHL", "SHR", "DBCOLON", "NAME", 
		"NORMALSTRING", "CHARSTRING", "LONGSTRING", "INT", "HEX", "FLOAT", "HEX_FLOAT", 
		"COMMENT", "WS", "NL", "SHEBANG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LuaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LuaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LuaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LuaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChunkContext chunk() {
			return GetRuleContext<ChunkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LuaParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			chunk();
			State = 61;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChunkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 2, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetstatContext retstat() {
			return GetRuleContext<RetstatContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 108122775973004290L) != 0)) {
				{
				{
				State = 65;
				stat();
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 71;
				retstat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GenericForContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LuaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(LuaParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(LuaParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(LuaParser.END, 0); }
		public GenericForContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterGenericFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitGenericFor(this);
		}
	}
	public partial class GotoContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(LuaParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public GotoContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterGoto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitGoto(this);
		}
	}
	public partial class GlobalFunctionContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(LuaParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public GlobalFunctionContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterGlobalFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitGlobalFunction(this);
		}
	}
	public partial class NumericForContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(LuaParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LuaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LuaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LuaParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(LuaParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(LuaParser.END, 0); }
		public NumericForContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterNumericFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitNumericFor(this);
		}
	}
	public partial class BreakContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(LuaParser.BREAK, 0); }
		public BreakContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterBreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitBreak(this);
		}
	}
	public partial class RepeatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT() { return GetToken(LuaParser.REPEAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(LuaParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public RepeatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}
	public partial class DoContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(LuaParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(LuaParser.END, 0); }
		public DoContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitDo(this);
		}
	}
	public partial class WhileContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(LuaParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(LuaParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(LuaParser.END, 0); }
		public WhileContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
	}
	public partial class EmptyStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LuaParser.SEMI, 0); }
		public EmptyStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterEmptyStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitEmptyStat(this);
		}
	}
	public partial class LocalAttrContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(LuaParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttnamelistContext attnamelist() {
			return GetRuleContext<AttnamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LuaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public LocalAttrContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterLocalAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitLocalAttr(this);
		}
	}
	public partial class LabelStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LabelStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterLabelStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitLabelStat(this);
		}
	}
	public partial class FunctionCallStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		public FunctionCallStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallStat(this);
		}
	}
	public partial class LocalFunctionContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(LuaParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(LuaParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public LocalFunctionContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterLocalFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitLocalFunction(this);
		}
	}
	public partial class AssignContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarlistContext varlist() {
			return GetRuleContext<VarlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LuaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		public AssignContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}
	public partial class IfContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(LuaParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(LuaParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(LuaParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(LuaParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(LuaParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(LuaParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(LuaParser.ELSE, 0); }
		public IfContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 6, RULE_stat);
		int _la;
		try {
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new EmptyStatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				Match(SEMI);
				}
				break;
			case 2:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				varlist();
				State = 76;
				Match(ASSIGN);
				State = 77;
				explist();
				}
				break;
			case 3:
				_localctx = new FunctionCallStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 79;
				functioncall();
				}
				break;
			case 4:
				_localctx = new LabelStatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 80;
				label();
				}
				break;
			case 5:
				_localctx = new BreakContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 81;
				Match(BREAK);
				}
				break;
			case 6:
				_localctx = new GotoContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 82;
				Match(GOTO);
				State = 83;
				Match(NAME);
				}
				break;
			case 7:
				_localctx = new DoContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 84;
				Match(DO);
				State = 85;
				block();
				State = 86;
				Match(END);
				}
				break;
			case 8:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 88;
				Match(WHILE);
				State = 89;
				exp(0);
				State = 90;
				Match(DO);
				State = 91;
				block();
				State = 92;
				Match(END);
				}
				break;
			case 9:
				_localctx = new RepeatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 94;
				Match(REPEAT);
				State = 95;
				block();
				State = 96;
				Match(UNTIL);
				State = 97;
				exp(0);
				}
				break;
			case 10:
				_localctx = new IfContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 99;
				Match(IF);
				State = 100;
				exp(0);
				State = 101;
				Match(THEN);
				State = 102;
				block();
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ELSEIF) {
					{
					{
					State = 103;
					Match(ELSEIF);
					State = 104;
					exp(0);
					State = 105;
					Match(THEN);
					State = 106;
					block();
					}
					}
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 113;
					Match(ELSE);
					State = 114;
					block();
					}
				}

				State = 117;
				Match(END);
				}
				break;
			case 11:
				_localctx = new NumericForContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 119;
				Match(FOR);
				State = 120;
				Match(NAME);
				State = 121;
				Match(ASSIGN);
				State = 122;
				exp(0);
				State = 123;
				Match(COMMA);
				State = 124;
				exp(0);
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 125;
					Match(COMMA);
					State = 126;
					exp(0);
					}
				}

				State = 129;
				Match(DO);
				State = 130;
				block();
				State = 131;
				Match(END);
				}
				break;
			case 12:
				_localctx = new GenericForContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 133;
				Match(FOR);
				State = 134;
				namelist();
				State = 135;
				Match(IN);
				State = 136;
				explist();
				State = 137;
				Match(DO);
				State = 138;
				block();
				State = 139;
				Match(END);
				}
				break;
			case 13:
				_localctx = new GlobalFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 141;
				Match(FUNCTION);
				State = 142;
				funcname();
				State = 143;
				funcbody();
				}
				break;
			case 14:
				_localctx = new LocalFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 145;
				Match(LOCAL);
				State = 146;
				Match(FUNCTION);
				State = 147;
				Match(NAME);
				State = 148;
				funcbody();
				}
				break;
			case 15:
				_localctx = new LocalAttrContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 149;
				Match(LOCAL);
				State = 150;
				attnamelist();
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 151;
					Match(ASSIGN);
					State = 152;
					explist();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttnamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LuaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LuaParser.COMMA, i);
		}
		public AttnamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attnamelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterAttnamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitAttnamelist(this);
		}
	}

	[RuleVersion(0)]
	public AttnamelistContext attnamelist() {
		AttnamelistContext _localctx = new AttnamelistContext(Context, State);
		EnterRule(_localctx, 8, RULE_attnamelist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(NAME);
			State = 158;
			attrib();
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 159;
				Match(COMMA);
				State = 160;
				Match(NAME);
				State = 161;
				attrib();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LuaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LuaParser.GT, 0); }
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterAttrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitAttrib(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 10, RULE_attrib);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 167;
				Match(LT);
				State = 168;
				Match(NAME);
				State = 169;
				Match(GT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetstatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(LuaParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LuaParser.SEMI, 0); }
		public RetstatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retstat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterRetstat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitRetstat(this);
		}
	}

	[RuleVersion(0)]
	public RetstatContext retstat() {
		RetstatContext _localctx = new RetstatContext(Context, State);
		EnterRule(_localctx, 12, RULE_retstat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(RETURN);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -71766905282492544L) != 0)) {
				{
				State = 173;
				explist();
				}
			}

			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 176;
				Match(SEMI);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DBCOLON() { return GetTokens(LuaParser.DBCOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBCOLON(int i) {
			return GetToken(LuaParser.DBCOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 14, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(DBCOLON);
			State = 180;
			Match(NAME);
			State = 181;
			Match(DBCOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(LuaParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(LuaParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COL() { return GetToken(LuaParser.COL, 0); }
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 16, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(NAME);
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 184;
				Match(DOT);
				State = 185;
				Match(NAME);
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COL) {
				{
				State = 191;
				Match(COL);
				State = 192;
				Match(NAME);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LuaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LuaParser.COMMA, i);
		}
		public VarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterVarlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitVarlist(this);
		}
	}

	[RuleVersion(0)]
	public VarlistContext varlist() {
		VarlistContext _localctx = new VarlistContext(Context, State);
		EnterRule(_localctx, 18, RULE_varlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			var();
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 196;
				Match(COMMA);
				State = 197;
				var();
				}
				}
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamelistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NAME() { return GetTokens(LuaParser.NAME); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME(int i) {
			return GetToken(LuaParser.NAME, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LuaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LuaParser.COMMA, i);
		}
		public NamelistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namelist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterNamelist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitNamelist(this);
		}
	}

	[RuleVersion(0)]
	public NamelistContext namelist() {
		NamelistContext _localctx = new NamelistContext(Context, State);
		EnterRule(_localctx, 20, RULE_namelist);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(NAME);
			State = 208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 204;
					Match(COMMA);
					State = 205;
					Match(NAME);
					}
					} 
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(LuaParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(LuaParser.COMMA, i);
		}
		public ExplistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterExplist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitExplist(this);
		}
	}

	[RuleVersion(0)]
	public ExplistContext explist() {
		ExplistContext _localctx = new ExplistContext(Context, State);
		EnterRule(_localctx, 22, RULE_explist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			exp(0);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 212;
				Match(COMMA);
				State = 213;
				exp(0);
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext left;
		public ExpContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(LuaParser.NIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(LuaParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(LuaParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTS() { return GetToken(LuaParser.DOTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctiondefContext functiondef() {
			return GetRuleContext<FunctiondefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(LuaParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POUND() { return GetToken(LuaParser.POUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(LuaParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUIG() { return GetToken(LuaParser.SQUIG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(LuaParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(LuaParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(LuaParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PER() { return GetToken(LuaParser.PER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDIV() { return GetToken(LuaParser.IDIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(LuaParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(LuaParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHL() { return GetToken(LuaParser.SHL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHR() { return GetToken(LuaParser.SHR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(LuaParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PIPE() { return GetToken(LuaParser.PIPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(LuaParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(LuaParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(LuaParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(LuaParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(LuaParser.NE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(LuaParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(LuaParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(LuaParser.OR, 0); }
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL:
				{
				State = 220;
				Match(NIL);
				}
				break;
			case FALSE:
				{
				State = 221;
				Match(FALSE);
				}
				break;
			case TRUE:
				{
				State = 222;
				Match(TRUE);
				}
				break;
			case INT:
			case HEX:
			case FLOAT:
			case HEX_FLOAT:
				{
				State = 223;
				number();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 224;
				@string();
				}
				break;
			case DOTS:
				{
				State = 225;
				Match(DOTS);
				}
				break;
			case FUNCTION:
				{
				State = 226;
				functiondef();
				}
				break;
			case OP:
			case NAME:
				{
				State = 227;
				prefixexp();
				}
				break;
			case OCU:
				{
				State = 228;
				tableconstructor();
				}
				break;
			case SQUIG:
			case MINUS:
			case POUND:
			case NOT:
				{
				State = 229;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 274877907840L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 230;
				exp(11);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 268;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 266;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 233;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						{
						State = 234;
						Match(CARET);
						}
						State = 235;
						_localctx.right = exp(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 236;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 237;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368752640000L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 238;
						_localctx.right = exp(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 239;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 240;
						_la = TokenStream.LA(1);
						if ( !(_la==MINUS || _la==PLUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 241;
						_localctx.right = exp(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 242;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						{
						State = 243;
						Match(CONCAT);
						}
						State = 244;
						_localctx.right = exp(8);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 245;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 246;
						_la = TokenStream.LA(1);
						if ( !(_la==SHL || _la==SHR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 247;
						_localctx.right = exp(8);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 248;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						{
						State = 249;
						Match(AMP);
						}
						State = 250;
						_localctx.right = exp(7);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 251;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						{
						State = 252;
						Match(SQUIG);
						}
						State = 253;
						_localctx.right = exp(6);
						}
						break;
					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 254;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						{
						State = 255;
						Match(PIPE);
						}
						State = 256;
						_localctx.right = exp(5);
						}
						break;
					case 9:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 257;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 258;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8444249301319728L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 259;
						_localctx.right = exp(4);
						}
						break;
					case 10:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 260;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						{
						State = 261;
						Match(AND);
						}
						State = 262;
						_localctx.right = exp(3);
						}
						break;
					case 11:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 263;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						{
						State = 264;
						Match(OR);
						}
						State = 265;
						_localctx.right = exp(2);
						}
						break;
					}
					} 
				}
				State = 270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixexpContext prefixexp() {
			return GetRuleContext<PrefixexpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(LuaParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(LuaParser.CB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LuaParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 26, RULE_var);
		try {
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 271;
				var_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 272;
				prefixexp();
				State = 279;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OB:
					{
					State = 273;
					Match(OB);
					State = 274;
					exp(0);
					State = 275;
					Match(CB);
					}
					break;
				case DOT:
					{
					State = 277;
					Match(DOT);
					State = 278;
					Match(NAME);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public Var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterVar_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitVar_name(this);
		}
	}

	[RuleVersion(0)]
	public Var_nameContext var_name() {
		Var_nameContext _localctx = new Var_nameContext(Context, State);
		EnterRule(_localctx, 28, RULE_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixexpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctioncallContext functioncall() {
			return GetRuleContext<FunctioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefixexp_Context prefixexp_() {
			return GetRuleContext<Prefixexp_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefixexp_without_functioncallContext prefixexp_without_functioncall() {
			return GetRuleContext<Prefixexp_without_functioncallContext>(0);
		}
		public PrefixexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterPrefixexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitPrefixexp(this);
		}
	}

	[RuleVersion(0)]
	public PrefixexpContext prefixexp() {
		PrefixexpContext _localctx = new PrefixexpContext(Context, State);
		EnterRule(_localctx, 30, RULE_prefixexp);
		try {
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				functioncall();
				State = 286;
				prefixexp_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288;
				prefixexp_without_functioncall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefixexp_without_functioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_nameContext var_name() {
			return GetRuleContext<Var_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefixexp_Context prefixexp_() {
			return GetRuleContext<Prefixexp_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(LuaParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(LuaParser.CP, 0); }
		public Prefixexp_without_functioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp_without_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterPrefixexp_without_functioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitPrefixexp_without_functioncall(this);
		}
	}

	[RuleVersion(0)]
	public Prefixexp_without_functioncallContext prefixexp_without_functioncall() {
		Prefixexp_without_functioncallContext _localctx = new Prefixexp_without_functioncallContext(Context, State);
		EnterRule(_localctx, 32, RULE_prefixexp_without_functioncall);
		try {
			State = 299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 291;
				var_name();
				State = 292;
				prefixexp_();
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294;
				Match(OP);
				State = 295;
				exp(0);
				State = 296;
				Match(CP);
				State = 297;
				prefixexp_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefixexp_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefixexp_Context prefixexp_() {
			return GetRuleContext<Prefixexp_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(LuaParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(LuaParser.CB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(LuaParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public Prefixexp_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixexp_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterPrefixexp_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitPrefixexp_(this);
		}
	}

	[RuleVersion(0)]
	public Prefixexp_Context prefixexp_() {
		Prefixexp_Context _localctx = new Prefixexp_Context(Context, State);
		EnterRule(_localctx, 34, RULE_prefixexp_);
		try {
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OB:
					{
					State = 301;
					Match(OB);
					State = 302;
					exp(0);
					State = 303;
					Match(CB);
					}
					break;
				case DOT:
					{
					State = 305;
					Match(DOT);
					State = 306;
					Match(NAME);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 309;
				prefixexp_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Functioncall_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefixexp_Context prefixexp_() {
			return GetRuleContext<Prefixexp_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Functioncall_Context functioncall_() {
			return GetRuleContext<Functioncall_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COL() { return GetToken(LuaParser.COL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public Functioncall_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterFunctioncall_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitFunctioncall_(this);
		}
	}

	[RuleVersion(0)]
	public Functioncall_Context functioncall_() {
		Functioncall_Context _localctx = new Functioncall_Context(Context, State);
		EnterRule(_localctx, 36, RULE_functioncall_);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313;
				prefixexp_();
				State = 318;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OP:
				case OCU:
				case NORMALSTRING:
				case CHARSTRING:
				case LONGSTRING:
					{
					State = 314;
					args();
					}
					break;
				case COL:
					{
					State = 315;
					Match(COL);
					State = 316;
					Match(NAME);
					State = 317;
					args();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 320;
				functioncall_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctioncallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefixexp_without_functioncallContext prefixexp_without_functioncall() {
			return GetRuleContext<Prefixexp_without_functioncallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Functioncall_Context functioncall_() {
			return GetRuleContext<Functioncall_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COL() { return GetToken(LuaParser.COL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FunctioncallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functioncall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterFunctioncall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitFunctioncall(this);
		}
	}

	[RuleVersion(0)]
	public FunctioncallContext functioncall() {
		FunctioncallContext _localctx = new FunctioncallContext(Context, State);
		EnterRule(_localctx, 38, RULE_functioncall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			prefixexp_without_functioncall();
			State = 330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP:
			case OCU:
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				{
				State = 326;
				args();
				}
				break;
			case COL:
				{
				State = 327;
				Match(COL);
				State = 328;
				Match(NAME);
				State = 329;
				args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 332;
			functioncall_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(LuaParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(LuaParser.CP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplistContext explist() {
			return GetRuleContext<ExplistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableconstructorContext tableconstructor() {
			return GetRuleContext<TableconstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 40, RULE_args);
		int _la;
		try {
			State = 341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334;
				Match(OP);
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -71766905282492544L) != 0)) {
					{
					State = 335;
					explist();
					}
				}

				State = 338;
				Match(CP);
				}
				break;
			case OCU:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				tableconstructor();
				}
				break;
			case NORMALSTRING:
			case CHARSTRING:
			case LONGSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 340;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctiondefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(LuaParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncbodyContext funcbody() {
			return GetRuleContext<FuncbodyContext>(0);
		}
		public FunctiondefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functiondef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterFunctiondef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitFunctiondef(this);
		}
	}

	[RuleVersion(0)]
	public FunctiondefContext functiondef() {
		FunctiondefContext _localctx = new FunctiondefContext(Context, State);
		EnterRule(_localctx, 42, RULE_functiondef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			Match(FUNCTION);
			State = 344;
			funcbody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncbodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(LuaParser.OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParlistContext parlist() {
			return GetRuleContext<ParlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP() { return GetToken(LuaParser.CP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(LuaParser.END, 0); }
		public FuncbodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcbody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterFuncbody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitFuncbody(this);
		}
	}

	[RuleVersion(0)]
	public FuncbodyContext funcbody() {
		FuncbodyContext _localctx = new FuncbodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_funcbody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			Match(OP);
			State = 347;
			parlist();
			State = 348;
			Match(CP);
			State = 349;
			block();
			State = 350;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamelistContext namelist() {
			return GetRuleContext<NamelistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LuaParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOTS() { return GetToken(LuaParser.DOTS, 0); }
		public ParlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterParlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitParlist(this);
		}
	}

	[RuleVersion(0)]
	public ParlistContext parlist() {
		ParlistContext _localctx = new ParlistContext(Context, State);
		EnterRule(_localctx, 46, RULE_parlist);
		int _la;
		try {
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				namelist();
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 353;
					Match(COMMA);
					State = 354;
					Match(DOTS);
					}
				}

				}
				break;
			case DOTS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357;
				Match(DOTS);
				}
				break;
			case CP:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableconstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCU() { return GetToken(LuaParser.OCU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCU() { return GetToken(LuaParser.CCU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldlistContext fieldlist() {
			return GetRuleContext<FieldlistContext>(0);
		}
		public TableconstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableconstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterTableconstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitTableconstructor(this);
		}
	}

	[RuleVersion(0)]
	public TableconstructorContext tableconstructor() {
		TableconstructorContext _localctx = new TableconstructorContext(Context, State);
		EnterRule(_localctx, 48, RULE_tableconstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			Match(OCU);
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -71766905281968256L) != 0)) {
				{
				State = 362;
				fieldlist();
				}
			}

			State = 365;
			Match(CCU);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext[] fieldsep() {
			return GetRuleContexts<FieldsepContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsepContext fieldsep(int i) {
			return GetRuleContext<FieldsepContext>(i);
		}
		public FieldlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterFieldlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitFieldlist(this);
		}
	}

	[RuleVersion(0)]
	public FieldlistContext fieldlist() {
		FieldlistContext _localctx = new FieldlistContext(Context, State);
		EnterRule(_localctx, 50, RULE_fieldlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			field();
			State = 373;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 368;
					fieldsep();
					State = 369;
					field();
					}
					} 
				}
				State = 375;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			State = 377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI || _la==COMMA) {
				{
				State = 376;
				fieldsep();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OB() { return GetToken(LuaParser.OB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CB() { return GetToken(LuaParser.CB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LuaParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(LuaParser.NAME, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 52, RULE_field);
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379;
				Match(OB);
				State = 380;
				exp(0);
				State = 381;
				Match(CB);
				State = 382;
				Match(ASSIGN);
				State = 383;
				exp(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385;
				Match(NAME);
				State = 386;
				Match(ASSIGN);
				State = 387;
				exp(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 388;
				exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsepContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(LuaParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(LuaParser.SEMI, 0); }
		public FieldsepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsep; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterFieldsep(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitFieldsep(this);
		}
	}

	[RuleVersion(0)]
	public FieldsepContext fieldsep() {
		FieldsepContext _localctx = new FieldsepContext(Context, State);
		EnterRule(_localctx, 54, RULE_fieldsep);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			_la = TokenStream.LA(1);
			if ( !(_la==SEMI || _la==COMMA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(LuaParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(LuaParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(LuaParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_FLOAT() { return GetToken(LuaParser.HEX_FLOAT, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 56, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -1152921504606846976L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NORMALSTRING() { return GetToken(LuaParser.NORMALSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSTRING() { return GetToken(LuaParser.CHARSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGSTRING() { return GetToken(LuaParser.LONGSTRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ILuaParserListener typedListener = listener as ILuaParserListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 58, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1008806316530991104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 12: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,67,398,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,1,0,1,0,1,0,1,1,1,1,1,2,5,2,67,8,2,10,2,12,2,70,9,2,1,2,3,2,
		73,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,5,3,109,8,3,10,3,12,3,112,9,3,1,3,1,3,3,3,116,8,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,1,3,1,3,3,3,128,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,154,8,
		3,3,3,156,8,3,1,4,1,4,1,4,1,4,1,4,5,4,163,8,4,10,4,12,4,166,9,4,1,5,1,
		5,1,5,3,5,171,8,5,1,6,1,6,3,6,175,8,6,1,6,3,6,178,8,6,1,7,1,7,1,7,1,7,
		1,8,1,8,1,8,5,8,187,8,8,10,8,12,8,190,9,8,1,8,1,8,3,8,194,8,8,1,9,1,9,
		1,9,5,9,199,8,9,10,9,12,9,202,9,9,1,10,1,10,1,10,5,10,207,8,10,10,10,12,
		10,210,9,10,1,11,1,11,1,11,5,11,215,8,11,10,11,12,11,218,9,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,232,8,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,5,12,267,8,12,10,12,12,12,270,9,12,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,3,13,280,8,13,3,13,282,8,13,1,14,1,14,1,15,1,15,
		1,15,1,15,3,15,290,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,300,
		8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,308,8,17,1,17,1,17,3,17,312,8,
		17,1,18,1,18,1,18,1,18,1,18,3,18,319,8,18,1,18,1,18,1,18,3,18,324,8,18,
		1,19,1,19,1,19,1,19,1,19,3,19,331,8,19,1,19,1,19,1,20,1,20,3,20,337,8,
		20,1,20,1,20,1,20,3,20,342,8,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
		1,22,1,23,1,23,1,23,3,23,356,8,23,1,23,1,23,3,23,360,8,23,1,24,1,24,3,
		24,364,8,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,372,8,25,10,25,12,25,375,
		9,25,1,25,3,25,378,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		26,3,26,390,8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,0,1,24,30,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,0,8,2,0,7,9,38,38,4,0,13,13,16,16,23,23,46,46,2,0,8,8,15,15,1,0,
		53,54,2,0,4,5,49,52,2,0,1,1,3,3,1,0,60,63,1,0,57,59,436,0,60,1,0,0,0,2,
		63,1,0,0,0,4,68,1,0,0,0,6,155,1,0,0,0,8,157,1,0,0,0,10,170,1,0,0,0,12,
		172,1,0,0,0,14,179,1,0,0,0,16,183,1,0,0,0,18,195,1,0,0,0,20,203,1,0,0,
		0,22,211,1,0,0,0,24,231,1,0,0,0,26,281,1,0,0,0,28,283,1,0,0,0,30,289,1,
		0,0,0,32,299,1,0,0,0,34,311,1,0,0,0,36,323,1,0,0,0,38,325,1,0,0,0,40,341,
		1,0,0,0,42,343,1,0,0,0,44,346,1,0,0,0,46,359,1,0,0,0,48,361,1,0,0,0,50,
		367,1,0,0,0,52,389,1,0,0,0,54,391,1,0,0,0,56,393,1,0,0,0,58,395,1,0,0,
		0,60,61,3,2,1,0,61,62,5,0,0,1,62,1,1,0,0,0,63,64,3,4,2,0,64,3,1,0,0,0,
		65,67,3,6,3,0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,
		69,72,1,0,0,0,70,68,1,0,0,0,71,73,3,12,6,0,72,71,1,0,0,0,72,73,1,0,0,0,
		73,5,1,0,0,0,74,156,5,1,0,0,75,76,3,18,9,0,76,77,5,2,0,0,77,78,3,22,11,
		0,78,156,1,0,0,0,79,156,3,38,19,0,80,156,3,14,7,0,81,156,5,25,0,0,82,83,
		5,33,0,0,83,156,5,56,0,0,84,85,5,26,0,0,85,86,3,4,2,0,86,87,5,29,0,0,87,
		156,1,0,0,0,88,89,5,45,0,0,89,90,3,24,12,0,90,91,5,26,0,0,91,92,3,4,2,
		0,92,93,5,29,0,0,93,156,1,0,0,0,94,95,5,40,0,0,95,96,3,4,2,0,96,97,5,44,
		0,0,97,98,3,24,12,0,98,156,1,0,0,0,99,100,5,34,0,0,100,101,3,24,12,0,101,
		102,5,42,0,0,102,110,3,4,2,0,103,104,5,28,0,0,104,105,3,24,12,0,105,106,
		5,42,0,0,106,107,3,4,2,0,107,109,1,0,0,0,108,103,1,0,0,0,109,112,1,0,0,
		0,110,108,1,0,0,0,110,111,1,0,0,0,111,115,1,0,0,0,112,110,1,0,0,0,113,
		114,5,27,0,0,114,116,3,4,2,0,115,113,1,0,0,0,115,116,1,0,0,0,116,117,1,
		0,0,0,117,118,5,29,0,0,118,156,1,0,0,0,119,120,5,31,0,0,120,121,5,56,0,
		0,121,122,5,2,0,0,122,123,3,24,12,0,123,124,5,3,0,0,124,127,3,24,12,0,
		125,126,5,3,0,0,126,128,3,24,12,0,127,125,1,0,0,0,127,128,1,0,0,0,128,
		129,1,0,0,0,129,130,5,26,0,0,130,131,3,4,2,0,131,132,5,29,0,0,132,156,
		1,0,0,0,133,134,5,31,0,0,134,135,3,20,10,0,135,136,5,35,0,0,136,137,3,
		22,11,0,137,138,5,26,0,0,138,139,3,4,2,0,139,140,5,29,0,0,140,156,1,0,
		0,0,141,142,5,32,0,0,142,143,3,16,8,0,143,144,3,44,22,0,144,156,1,0,0,
		0,145,146,5,36,0,0,146,147,5,32,0,0,147,148,5,56,0,0,148,156,3,44,22,0,
		149,150,5,36,0,0,150,153,3,8,4,0,151,152,5,2,0,0,152,154,3,22,11,0,153,
		151,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,74,1,0,0,0,155,75,1,0,
		0,0,155,79,1,0,0,0,155,80,1,0,0,0,155,81,1,0,0,0,155,82,1,0,0,0,155,84,
		1,0,0,0,155,88,1,0,0,0,155,94,1,0,0,0,155,99,1,0,0,0,155,119,1,0,0,0,155,
		133,1,0,0,0,155,141,1,0,0,0,155,145,1,0,0,0,155,149,1,0,0,0,156,7,1,0,
		0,0,157,158,5,56,0,0,158,164,3,10,5,0,159,160,5,3,0,0,160,161,5,56,0,0,
		161,163,3,10,5,0,162,159,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,
		1,0,0,0,165,9,1,0,0,0,166,164,1,0,0,0,167,168,5,4,0,0,168,169,5,56,0,0,
		169,171,5,5,0,0,170,167,1,0,0,0,170,171,1,0,0,0,171,11,1,0,0,0,172,174,
		5,41,0,0,173,175,3,22,11,0,174,173,1,0,0,0,174,175,1,0,0,0,175,177,1,0,
		0,0,176,178,5,1,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,13,1,0,0,0,179,
		180,5,55,0,0,180,181,5,56,0,0,181,182,5,55,0,0,182,15,1,0,0,0,183,188,
		5,56,0,0,184,185,5,6,0,0,185,187,5,56,0,0,186,184,1,0,0,0,187,190,1,0,
		0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,193,1,0,0,0,190,188,1,0,0,0,191,
		192,5,14,0,0,192,194,5,56,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,17,1,
		0,0,0,195,200,3,26,13,0,196,197,5,3,0,0,197,199,3,26,13,0,198,196,1,0,
		0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,19,1,0,0,0,202,
		200,1,0,0,0,203,208,5,56,0,0,204,205,5,3,0,0,205,207,5,56,0,0,206,204,
		1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,21,1,0,0,0,
		210,208,1,0,0,0,211,216,3,24,12,0,212,213,5,3,0,0,213,215,3,24,12,0,214,
		212,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,23,1,0,
		0,0,218,216,1,0,0,0,219,220,6,12,-1,0,220,232,5,37,0,0,221,232,5,30,0,
		0,222,232,5,43,0,0,223,232,3,56,28,0,224,232,3,58,29,0,225,232,5,48,0,
		0,226,232,3,42,21,0,227,232,3,30,15,0,228,232,3,48,24,0,229,230,7,0,0,
		0,230,232,3,24,12,11,231,219,1,0,0,0,231,221,1,0,0,0,231,222,1,0,0,0,231,
		223,1,0,0,0,231,224,1,0,0,0,231,225,1,0,0,0,231,226,1,0,0,0,231,227,1,
		0,0,0,231,228,1,0,0,0,231,229,1,0,0,0,232,268,1,0,0,0,233,234,10,12,0,
		0,234,235,5,22,0,0,235,267,3,24,12,12,236,237,10,10,0,0,237,238,7,1,0,
		0,238,267,3,24,12,11,239,240,10,9,0,0,240,241,7,2,0,0,241,267,3,24,12,
		10,242,243,10,8,0,0,243,244,5,47,0,0,244,267,3,24,12,8,245,246,10,7,0,
		0,246,247,7,3,0,0,247,267,3,24,12,8,248,249,10,6,0,0,249,250,5,12,0,0,
		250,267,3,24,12,7,251,252,10,5,0,0,252,253,5,7,0,0,253,267,3,24,12,6,254,
		255,10,4,0,0,255,256,5,21,0,0,256,267,3,24,12,5,257,258,10,3,0,0,258,259,
		7,4,0,0,259,267,3,24,12,4,260,261,10,2,0,0,261,262,5,24,0,0,262,267,3,
		24,12,3,263,264,10,1,0,0,264,265,5,39,0,0,265,267,3,24,12,2,266,233,1,
		0,0,0,266,236,1,0,0,0,266,239,1,0,0,0,266,242,1,0,0,0,266,245,1,0,0,0,
		266,248,1,0,0,0,266,251,1,0,0,0,266,254,1,0,0,0,266,257,1,0,0,0,266,260,
		1,0,0,0,266,263,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,
		0,269,25,1,0,0,0,270,268,1,0,0,0,271,282,3,28,14,0,272,279,3,30,15,0,273,
		274,5,19,0,0,274,275,3,24,12,0,275,276,5,20,0,0,276,280,1,0,0,0,277,278,
		5,6,0,0,278,280,5,56,0,0,279,273,1,0,0,0,279,277,1,0,0,0,280,282,1,0,0,
		0,281,271,1,0,0,0,281,272,1,0,0,0,282,27,1,0,0,0,283,284,5,56,0,0,284,
		29,1,0,0,0,285,286,3,38,19,0,286,287,3,34,17,0,287,290,1,0,0,0,288,290,
		3,32,16,0,289,285,1,0,0,0,289,288,1,0,0,0,290,31,1,0,0,0,291,292,3,28,
		14,0,292,293,3,34,17,0,293,300,1,0,0,0,294,295,5,10,0,0,295,296,3,24,12,
		0,296,297,5,11,0,0,297,298,3,34,17,0,298,300,1,0,0,0,299,291,1,0,0,0,299,
		294,1,0,0,0,300,33,1,0,0,0,301,302,5,19,0,0,302,303,3,24,12,0,303,304,
		5,20,0,0,304,308,1,0,0,0,305,306,5,6,0,0,306,308,5,56,0,0,307,301,1,0,
		0,0,307,305,1,0,0,0,308,309,1,0,0,0,309,312,3,34,17,0,310,312,1,0,0,0,
		311,307,1,0,0,0,311,310,1,0,0,0,312,35,1,0,0,0,313,318,3,34,17,0,314,319,
		3,40,20,0,315,316,5,14,0,0,316,317,5,56,0,0,317,319,3,40,20,0,318,314,
		1,0,0,0,318,315,1,0,0,0,319,320,1,0,0,0,320,321,3,36,18,0,321,324,1,0,
		0,0,322,324,1,0,0,0,323,313,1,0,0,0,323,322,1,0,0,0,324,37,1,0,0,0,325,
		330,3,32,16,0,326,331,3,40,20,0,327,328,5,14,0,0,328,329,5,56,0,0,329,
		331,3,40,20,0,330,326,1,0,0,0,330,327,1,0,0,0,331,332,1,0,0,0,332,333,
		3,36,18,0,333,39,1,0,0,0,334,336,5,10,0,0,335,337,3,22,11,0,336,335,1,
		0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,342,5,11,0,0,339,342,3,48,24,
		0,340,342,3,58,29,0,341,334,1,0,0,0,341,339,1,0,0,0,341,340,1,0,0,0,342,
		41,1,0,0,0,343,344,5,32,0,0,344,345,3,44,22,0,345,43,1,0,0,0,346,347,5,
		10,0,0,347,348,3,46,23,0,348,349,5,11,0,0,349,350,3,4,2,0,350,351,5,29,
		0,0,351,45,1,0,0,0,352,355,3,20,10,0,353,354,5,3,0,0,354,356,5,48,0,0,
		355,353,1,0,0,0,355,356,1,0,0,0,356,360,1,0,0,0,357,360,5,48,0,0,358,360,
		1,0,0,0,359,352,1,0,0,0,359,357,1,0,0,0,359,358,1,0,0,0,360,47,1,0,0,0,
		361,363,5,17,0,0,362,364,3,50,25,0,363,362,1,0,0,0,363,364,1,0,0,0,364,
		365,1,0,0,0,365,366,5,18,0,0,366,49,1,0,0,0,367,373,3,52,26,0,368,369,
		3,54,27,0,369,370,3,52,26,0,370,372,1,0,0,0,371,368,1,0,0,0,372,375,1,
		0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,
		376,378,3,54,27,0,377,376,1,0,0,0,377,378,1,0,0,0,378,51,1,0,0,0,379,380,
		5,19,0,0,380,381,3,24,12,0,381,382,5,20,0,0,382,383,5,2,0,0,383,384,3,
		24,12,0,384,390,1,0,0,0,385,386,5,56,0,0,386,387,5,2,0,0,387,390,3,24,
		12,0,388,390,3,24,12,0,389,379,1,0,0,0,389,385,1,0,0,0,389,388,1,0,0,0,
		390,53,1,0,0,0,391,392,7,5,0,0,392,55,1,0,0,0,393,394,7,6,0,0,394,57,1,
		0,0,0,395,396,7,7,0,0,396,59,1,0,0,0,36,68,72,110,115,127,153,155,164,
		170,174,177,188,193,200,208,216,231,266,268,279,281,289,299,307,311,318,
		323,330,336,341,355,359,363,373,377,389
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace YALuaToy.Compilation.Antlr
